# src/security/malware_detector.py
import hashlib
import numpy as np
from sentence_transformers import SentenceTransformer
from typing import List, Dict
import json

class MalwareDetector:
    def __init__(self, qdrant_manager, model_name="all-MiniLM-L6-v2"):
        self.qdrant = qdrant_manager
        self.encoder = SentenceTransformer(model_name)
        
    def create_file_signature(self, file_content: bytes) -> Dict:
        """파일 시그니처 생성"""
        # 파일 해시 생성
        file_hash = hashlib.sha256(file_content).hexdigest()
        
        # 파일 바이트를 텍스트로 변환 (hex 표현)
        hex_content = file_content.hex()[:1000]  # 처음 1000자만 사용
        
        # 문자열을 벡터로 임베딩
        embedding = self.encoder.encode(hex_content).tolist()
        
        return {
            "hash": file_hash,
            "content": hex_content,
            "embedding": embedding,
            "threat_level": "unknown",
            "category": "file_signature"
        }
    
    def analyze_suspicious_file(self, file_content: bytes, threshold: float = 0.8):
        """의심스러운 파일 분석"""
        # 파일 시그니처 생성
        signature = self.create_file_signature(file_content)
        
        # 기존 악성코드와 유사도 검색
        results = self.qdrant.security_search(
            query_vector=signature["embedding"],
            collection_type="malware_signatures",
            limit=10
        )
        
        analysis_result = {
            "file_hash": signature["hash"],
            "is_suspicious": False,
            "similarity_score": 0.0,
            "similar_threats": [],
            "recommendation": "파일이 안전해 보입니다"
        }
        
        if results:
            max_score = max([result.score for result in results])
            analysis_result["similarity_score"] = max_score
            
            if max_score >= threshold:
                analysis_result["is_suspicious"] = True
                analysis_result["recommendation"] = f"위험! 기존 악성코드와 {max_score:.2%} 유사"
                
                # 유사한 위협 정보 수집
                for result in results[:3]:
                    threat_info = {
                        "similarity": result.score,
                        "threat_level": result.payload.get("threat_level", "unknown"),
                        "source": result.payload.get("source", "unknown")
                    }
                    analysis_result["similar_threats"].append(threat_info)
        
        return analysis_result
    
    def load_malware_database(self, file_path: str):
        """악성코드 데이터베이스 로드"""
        with open(file_path, 'r', encoding='utf-8') as f:
            malware_data = json.load(f)
        
        # 각 악성코드 정보를 벡터화
        processed_data = []
        for malware in malware_data:
            # 악성코드 정보를 텍스트로 변환
            text_content = f"{malware.get('name', '')} {malware.get('description', '')} {malware.get('hash', '')}"
            embedding = self.encoder.encode(text_content).tolist()
            
            processed_data.append({
                "content": text_content,
                "embedding": embedding,
                "threat_level": malware.get("threat_level", "high"),
                "source": malware.get("source", "malware_db"),
                "category": "malware"
            })
        
        # Qdrant에 저장
        self.qdrant.add_security_data("malware_signatures", processed_data)
        print(f"{len(processed_data)}개 악성코드 시그니처 로드 완료")
